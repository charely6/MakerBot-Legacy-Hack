import os
import logging
import re

import kaiten.constants
import kaiten.error

from kaiten.processes.process import Process

class ResetToFactoryProcess(Process):
    """
    Will reset the machine its (almost) factory settings.  Depending on the
    user defined "tasks", we may only do a subset of tasks
    """
    def __init__(self, machine_manager, machine_driver,
                 config, clear_calibration):
        super(ResetToFactoryProcess, self).__init__(machine_manager, machine_driver,
                                                    config)
        self._config = config
        # No toolhead errors should be allowed during this process
        self.ignore_all_toolhead_errors()
        # Any reset tasks that are exposed as json methods using the
        # pass_callback decorator can go here (as long as they do not
        # require any arguments besides the callback).
        self._subgenerators = [
            machine_manager._server.dbus_manager.wifi_reset,
        ]
        self._clear_calibration = clear_calibration
        self._server = machine_manager._server

    def _do_remove_user_files(self):
        """
        Removes all files in /home/things, /home/camera and /home/firmware.
        /home/ could be some other directory if kaiten.constants.home_dir varies.
        Since this could potentially take a while (since there can potentially
        be several large files), we iterate to remove them.
        """
        dirs_to_remove = [
            os.path.join(kaiten.constants.home_dir, "things"),
            kaiten.constants.current_print_dir,
            os.path.join(kaiten.constants.home_dir, "camera"),
            os.path.join(kaiten.constants.home_dir, "firmware"),
        ]
        for _dir in dirs_to_remove:
            yield from kaiten.util.remove_dir(_dir)
            os.mkdir(_dir)
            # All directories in /home should be owned by daemon
            os.chown(_dir, 1, 1)
            # For good measure
            os.chmod(_dir, 0o777)
        ui_settings_file = os.path.join(kaiten.constants.home_dir, 'settings', 'ui_settings.json')
        # remove home configs
        settings_files = [kaiten.constants.kaiten_home_path,
                          kaiten.constants.config_home_path,
                          ui_settings_file]
        for path in settings_files:
            if os.path.isfile(path):
                os.unlink(path)
        cf = kaiten.constants.calibration_settings
        if self._clear_calibration and os.path.isfile(cf):
            os.unlink(cf)
        self._machine_manager._server.reload_config()

    def _copy_example_prints(self):
        backup_path = kaiten.constants.example_print_dir
        target_path = kaiten.constants.example_print_dest_dir
        if os.path.exists(target_path):
            yield from kaiten.util.remove_dir(target_path)
        if os.path.exists(backup_path):
            yield from kaiten.util.iterative_copytree(backup_path, target_path)
        else:
            yield

    def _lcd_reset_to_factory(self):
        """
        Sends the reset to factory message to the LCD
        """
        method = "reset_to_factory"
        params = {}
        yield from self._client_request('lcd', method, params)

    def _auth_reset_to_factory(self):
        """
        Delete all auth codes and tokens
        """
        method = "reset_auth"
        params = {}
        yield from self._client_request('fcgi', method, params)

    def _start_fre(self):
        """
        Make sure we run the FRE until completed or skipped.
        """
        # We really want to make sure this gets committed since
        # the production line will likely cut the power as soon
        # as this completes.
        with kaiten.util.open_write(kaiten.constants.do_fre):
            pass
        yield from kaiten.util.sleep(1)
        self._machine_manager.setup_printer(enqueue=True)

    def _do_initialize(self):
        self._log.info("Starting reset to factory")
        while not self._machine_manager._server._fcgi_client: yield
        yield

    def _start_subgenerators(self):
        """ Start subtasks contained in self._subgenerators """
        self._subgen_done = {}
        def callback_factory():
            key = object()
            self._subgen_done.update({key: False})
            def callback(result=None, error=None):
                self._subgen_done[key] = True
                if error:
                    self._log.warning('Error in factory reset subtask:\n%r'%
                                      error, exc_info=True)
            return callback
        for subgen in self._subgenerators:
            subgen(callback=callback_factory())

    def _join_subgenerators(self):
        while not all(self._subgen_done.values()):
            yield

    def _do_run(self):
        self._start_subgenerators()
        self._machine_manager._server.auth_store.clear_authorized()
        yield from self._do_remove_user_files()
        self._machine_manager._server.reload_config()
        if not self._machine_manager._config["kaiten"]["do_not_reset_lcd_settings"]:
            yield from self._lcd_reset_to_factory()
        yield from self._auth_reset_to_factory()
        yield from self._copy_example_prints()
        yield from self._join_subgenerators()
        yield from self._start_fre()
