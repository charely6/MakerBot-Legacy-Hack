import datetime
import logging
import os

import mbcoreutils.machine_definitions

import kaiten.error

from kaiten.processes.process import Process

class BronxUploadProcess(Process):
    """
    Tries to upload bronx firmware multiple times so we can recover from errors
    """
    def __init__(self, machine_manager, pymach, filename, toolhead, config):
        self._filename = filename
        if not os.path.exists(filename):
            raise OSError(filename + " does not exist!")
        self._toolhead = toolhead
        super(BronxUploadProcess, self).__init__(machine_manager, pymach, config)
        self.ignore_all_toolhead_errors()
        self._num_tries = 2
        for key in self._config['toolheads'].keys():
            if self._toolhead in self._config['toolheads'][key]['locations']:
                if key in ('bronx', 'u1_extruder'):
                    self._disconnect_error\
                        = kaiten.error.carriage_program_failure
                elif key in ('chamber', 'u1_chamber'):
                    self._disconnect_error\
                        = kaiten.error.chamber_program_failure
                else:
                    raise RuntimeError("what toolhead is in {0}".format(self._toolhead))


    def _do_run(self):
        program_worked = False
        constants = mbcoreutils.machine_definitions.constants
        for attempt in range(self._num_tries):
            upload_worked = True
            for code in self._pymach.program_toolhead(bytes(self._filename, 'UTF-8'),
                                                      self._toolhead):
                if code > constants["process_error_threshold"]:
                    upload_worked = False
                    break
            if upload_worked:
                self._log.info("Toolhead {0} programmed on try {1}"\
                               .format(self._toolhead, attempt))
                program_worked = True
                break
            self._log.error("Toolhead {0} failed on try {1}"\
                            .format(self._toolhead, attempt))
        if not program_worked:
            yield self._disconnect_error
            # If we reach this, we failed uploading firmware to the toolhead
            self._log.error("Toolhead {0} firmware upload failed after {1} tries!"\
                           .format(self._toolhead, self._num_tries))
        else:
            self._log.info("Toolhead {0} firmware upload complete"\
                           .format(self._toolhead))

    def contract_duration(self):
        return datetime.timedelta(0, 0, 0, 1)
