"""This activity handles Z Calibration for bots with endstops

The bot also needs valid x and y references.
"""

import kaiten.error
import kaiten.util

from kaiten.activities import ZHomeActivity

class EndstopZCalibrationActivity(ZHomeActivity):

    def __init__(self,  machine_manager, pymach, config, use_alternate_home, *,
        target_hes=None):
        super().__init__(machine_manager, pymach, config)
        self._home_failed = True
        # Here's some garbage: horseshoes need to home on a pin if the
        # extruder is a squid because it needs to be hot. However, if it's
        # an orca, it homes cold to the center of the build plate.
        self._home_position = [
                self._home_settings["z_reference_point"]["x"],
                self._home_settings["z_reference_point"]["y"]]
        self._post_coarse_z_offset = 1.25

        if use_alternate_home:
            machine_manager._log.info("Using alternate z ref point")
            self._home_position = [
                self._home_settings["alternate_z_reference_point"]["x"],
                self._home_settings["alternate_z_reference_point"]["y"]]
            self._post_coarse_z_offset = 0.25

    def run(self):
        # home to endstop
        # Endstop option set in printer_settings.json
        yield from self._pymach.home_axis(2,
                                          self._home_settings['rate_mm_per_s']['z'])
        self._home_failed = False
        # move z stage down first because now its above the level of the tool
        yield from self._pymach.move_axis(2,
            self._home_settings['timeseries_start_position_z']
                                          + self._post_coarse_z_offset,
            self._config['max_speed_mm_per_second']['z'],
            relative=False)
        # move over calibration position
        yield from self._xymove(self._home_position)
        yield from self._seat_nozzle()
        yield from self._init_hes()
        z_position = yield from self._find_fine_z_position()
        self._log.info("Found Calibration Offset: {0}".format(z_position))
        yield from self._update_reference_offset(-1 * z_position)

    def cancel(self, error_code=None):
        yield from self._pymach.abort()

    def _cleanup(self):
        if self._home_failed:
            yield from self._pymach.set_position('z', 0)

    def _update_reference_offset(self, offset:float):
        tool_uid = self._pymach.get_tool_uid(0)
        if not tool_uid:
            yield kaiten.error.no_tool_connected
        tool_uid = str(tool_uid)
        offset_settings = {'z_reference_point': {'offset': offset}}
        update_dict = {"home": {'per_extruder': {tool_uid: offset_settings}}}

        # If we downgrade to an older firmware, we will be actually using the
        # global calibration settings field in our calibration settings file.
        # Rather than attempting to make this accurate, we make this as safe
        # as possible by choosing the minimum offset.
        try:
            calibration = kaiten.util.read_calibration_settings()
            global_offset = calibration["home"]['z_reference_point']['offset']
            global_offset = min(global_offset, offset)
        except Exception:
            global_offset = offset
        update_dict["home"]['z_reference_point'] = {'offset': global_offset}

        kaiten.util.update_calibration_settings(update_dict)
        self._machine_manager._server.reload_config()
