""" This file was automatically generated, do not edit it! """

import ctypes


class ToolheadStatus(ctypes.LittleEndianStructure):
    _fields_ = (
        ("tool_id", ctypes.c_uint8),
        ("error", ctypes.c_uint8),
        ("preheating", ctypes.c_uint8),
        ("target_temperature", ctypes.c_int16),
        ("current_temperature", ctypes.c_int16),
    )

    def get_dict(self):
        return ToolheadStatus.get_instance_dict(self)

    @staticmethod
    def get_instance_dict(instance):
        field_dict = {}
        if hasattr(instance.tool_id, "get_dict"):
            field_dict["tool_id"] = instance.tool_id.get_dict()
        else:
            field_dict["tool_id"] = instance.tool_id

        if hasattr(instance.error, "get_dict"):
            field_dict["error"] = instance.error.get_dict()
        else:
            field_dict["error"] = instance.error

        if hasattr(instance.preheating, "get_dict"):
            field_dict["preheating"] = instance.preheating.get_dict()
        else:
            field_dict["preheating"] = instance.preheating

        if hasattr(instance.target_temperature, "get_dict"):
            field_dict["target_temperature"] = instance.target_temperature.get_dict()
        else:
            field_dict["target_temperature"] = instance.target_temperature

        if hasattr(instance.current_temperature, "get_dict"):
            field_dict["current_temperature"] = instance.current_temperature.get_dict()
        else:
            field_dict["current_temperature"] = instance.current_temperature

        
        return field_dict

class BronxToolheadStatus(ctypes.LittleEndianStructure):
    _fields_ = ToolheadStatus._fields_ + (
        ("filament_fan_running", ctypes.c_bool),
        ("memory_space", ctypes.c_uint16),
        ("filament_presence", ctypes.c_bool),
        ("extrusion_percent", ctypes.c_uint8),
        ("filament_jam", ctypes.c_bool),
        ("ticks_remaining", ctypes.c_uint32),
        ("move_status_bitfield", ctypes.c_uint8),
    )

    def get_dict(self):
        return BronxToolheadStatus.get_instance_dict(self)

    @staticmethod
    def get_instance_dict(instance):
        field_dict = {}
        if hasattr(instance.filament_fan_running, "get_dict"):
            field_dict["filament_fan_running"] = instance.filament_fan_running.get_dict()
        else:
            field_dict["filament_fan_running"] = instance.filament_fan_running

        if hasattr(instance.memory_space, "get_dict"):
            field_dict["memory_space"] = instance.memory_space.get_dict()
        else:
            field_dict["memory_space"] = instance.memory_space

        if hasattr(instance.filament_presence, "get_dict"):
            field_dict["filament_presence"] = instance.filament_presence.get_dict()
        else:
            field_dict["filament_presence"] = instance.filament_presence

        if hasattr(instance.extrusion_percent, "get_dict"):
            field_dict["extrusion_percent"] = instance.extrusion_percent.get_dict()
        else:
            field_dict["extrusion_percent"] = instance.extrusion_percent

        if hasattr(instance.filament_jam, "get_dict"):
            field_dict["filament_jam"] = instance.filament_jam.get_dict()
        else:
            field_dict["filament_jam"] = instance.filament_jam

        if hasattr(instance.ticks_remaining, "get_dict"):
            field_dict["ticks_remaining"] = instance.ticks_remaining.get_dict()
        else:
            field_dict["ticks_remaining"] = instance.ticks_remaining

        if hasattr(instance.move_status_bitfield, "get_dict"):
            field_dict["move_status_bitfield"] = instance.move_status_bitfield.get_dict()
        else:
            field_dict["move_status_bitfield"] = instance.move_status_bitfield

        field_dict.update(ToolheadStatus.get_instance_dict(instance))
        return field_dict

class ChamberToolheadStatus(ctypes.LittleEndianStructure):
    _fields_ = ToolheadStatus._fields_ + (
        ("door_open", ctypes.c_bool),
        ("fan_duty", ctypes.c_uint8),
        ("heater_duty", ctypes.c_uint8),
        ("otp_triggered", ctypes.c_bool),
        ("heater_temp", ctypes.c_uint16),
        ("fan_setpoint_hz", ctypes.c_uint8),
        ("heater_setpoint_c", ctypes.c_uint8),
        ("fan_speed_hz", ctypes.c_uint8),
        ("control_regime", ctypes.c_uint8),
    )

    def get_dict(self):
        return ChamberToolheadStatus.get_instance_dict(self)

    @staticmethod
    def get_instance_dict(instance):
        field_dict = {}
        if hasattr(instance.door_open, "get_dict"):
            field_dict["door_open"] = instance.door_open.get_dict()
        else:
            field_dict["door_open"] = instance.door_open

        if hasattr(instance.fan_duty, "get_dict"):
            field_dict["fan_duty"] = instance.fan_duty.get_dict()
        else:
            field_dict["fan_duty"] = instance.fan_duty

        if hasattr(instance.heater_duty, "get_dict"):
            field_dict["heater_duty"] = instance.heater_duty.get_dict()
        else:
            field_dict["heater_duty"] = instance.heater_duty

        if hasattr(instance.otp_triggered, "get_dict"):
            field_dict["otp_triggered"] = instance.otp_triggered.get_dict()
        else:
            field_dict["otp_triggered"] = instance.otp_triggered

        if hasattr(instance.heater_temp, "get_dict"):
            field_dict["heater_temp"] = instance.heater_temp.get_dict()
        else:
            field_dict["heater_temp"] = instance.heater_temp

        if hasattr(instance.fan_setpoint_hz, "get_dict"):
            field_dict["fan_setpoint_hz"] = instance.fan_setpoint_hz.get_dict()
        else:
            field_dict["fan_setpoint_hz"] = instance.fan_setpoint_hz

        if hasattr(instance.heater_setpoint_c, "get_dict"):
            field_dict["heater_setpoint_c"] = instance.heater_setpoint_c.get_dict()
        else:
            field_dict["heater_setpoint_c"] = instance.heater_setpoint_c

        if hasattr(instance.fan_speed_hz, "get_dict"):
            field_dict["fan_speed_hz"] = instance.fan_speed_hz.get_dict()
        else:
            field_dict["fan_speed_hz"] = instance.fan_speed_hz

        if hasattr(instance.control_regime, "get_dict"):
            field_dict["control_regime"] = instance.control_regime.get_dict()
        else:
            field_dict["control_regime"] = instance.control_regime

        field_dict.update(ToolheadStatus.get_instance_dict(instance))
        return field_dict

status_type_lookup = {
     "": ToolheadStatus,
     "bronx": BronxToolheadStatus,
     "chamber": ChamberToolheadStatus,
}


class MachineResponseStatus(ctypes.LittleEndianStructure):
    _fields_ = (
        ("preheat_percent", ctypes.c_uint8),
        ("move_buffer_available_space", ctypes.c_uint8),
        ("machine_error", ctypes.c_uint16),
        ("toolhead_status", ctypes.POINTER(ctypes.POINTER(ToolheadStatus)))
    )
    def get_dict(self, toolhead_structure):
        return MachineResponseStatus.get_instance_dict(self, toolhead_structure)

    @staticmethod
    def get_instance_dict(instance, toolhead_structure):
        field_dict = {}
        field_dict['preheat_percent'] = instance.preheat_percent
        field_dict['move_buffer_available_space'] = instance.move_buffer_available_space
        field_dict['machine_error'] = instance.machine_error
        field_dict['toolhead_status'] = []
        for i in range(len(toolhead_structure)):
            thclass = status_type_lookup[toolhead_structure[i]]
            thobj = ctypes.cast(instance.toolhead_status[i], ctypes.POINTER(thclass)).contents
            field_dict['toolhead_status'].append(thclass.get_instance_dict(thobj))
        return field_dict

class ToolUsage(ctypes.LittleEndianStructure):
    _fields_ = (
        ("retract_count", ctypes.c_uint32),
        ("extrusion_time_s", ctypes.c_uint32),
        ("extrusion_distance_mm", ctypes.c_uint32),
        ("refurb_count", ctypes.c_uint8),
        ("serial", ctypes.c_uint32),
    )

    def get_dict(self):
        field_dict = {}
        if hasattr(self.retract_count, "get_dict"):
            field_dict["retract_count"] = self.retract_count.get_dict()
        else:
            field_dict["retract_count"] = self.retract_count

        if hasattr(self.extrusion_time_s, "get_dict"):
            field_dict["extrusion_time_s"] = self.extrusion_time_s.get_dict()
        else:
            field_dict["extrusion_time_s"] = self.extrusion_time_s

        if hasattr(self.extrusion_distance_mm, "get_dict"):
            field_dict["extrusion_distance_mm"] = self.extrusion_distance_mm.get_dict()
        else:
            field_dict["extrusion_distance_mm"] = self.extrusion_distance_mm

        if hasattr(self.refurb_count, "get_dict"):
            field_dict["refurb_count"] = self.refurb_count.get_dict()
        else:
            field_dict["refurb_count"] = self.refurb_count

        if hasattr(self.serial, "get_dict"):
            field_dict["serial"] = self.serial.get_dict()
        else:
            field_dict["serial"] = self.serial

        return field_dict

