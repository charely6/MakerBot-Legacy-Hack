import logging
import datetime

import kaiten.error
from kaiten.processes.process import Process

class PreheatProcess(Process):
    """
    A preheat "process".  The process just sets targets and then ends, but it
    is still a process so we can report relevant toolhead errors?

    @param machine_manager: The machine_manager object.  This process calls
        notify on that object to notify conneted clients of events.
    @param pymach: The pymachine object
    @param temperature_settings: Temperature values to heat up to.  In the form
        of [tool_0, tool_1].
    """
    def __init__(self, machine_manager, pymach, config, temperature_settings=None):
        super(PreheatProcess, self).__init__(machine_manager, pymach, config)
        # Pymachine expects [tool_0, tool_1, platform, chamber].  We fill in
        # 0s until we match that length
        target_length = 4
        self._config = config
        # This will grab the optional temperature_settings kwarg
        if not isinstance(temperature_settings, list):
            thconf = self._config['toolheads'].values()
            temperature_settings = [None] * sum(\
                                                map(len,\
                                                    map(lambda v: v['locations'],\
                                                        thconf)))

            for th_type in thconf:
                for loc in th_type['locations']:
                    temperature_settings[loc] = th_type['heater']\
                                                ['preheat_temperature']
        # This will make sure temperature_settings is the appropriate length
        temperature_settings = temperature_settings + [0] * (target_length - len(temperature_settings))
        # This will force all temperature settings into ints
        self._temperature_settings = list(map(lambda x: int(x), temperature_settings))

        self.ignorable_toolhead_errors.update({
            kaiten.error.no_filament,
            kaiten.error.filament_slip,
        })

    def _do_run(self):
        yield from self._heat_to_temperature(self._temperature_settings, wait=False)

    def contract_duration(self):
        """
        Superclass Implementation
        """
        return datetime.timedelta(0, 0, 0, 50)
