import logging
import os
import signal
import sys
import traceback
import warnings

import kaiten.constants
import kaiten.error
import kaiten.log
import kaiten.server
import kaiten.util

# We make these global so that we can still use this main
# module for running kaiten in a thread.
SIGNALS = ('SIGTERM',)
server = None
log = None
event_log = None

def handle_signal(signum, frame):
    if server is None:
        sys.exit(0)
    else:
        server.stop('caught signal %d'% signum)

def log_startup():
    # TODO: How many of these messages do we actually want?
    log.info('kaiten %s started', kaiten.__version__)
    log.info('process id: %r', os.getpid())
    log.info('python version: %r', sys.version)

def disable_warnings():
    # Ideally we would just "ignore" all warnings, but doing this
    # results in adding all warnings to an undocumented warning
    # registry.  Setting a do-nothing warning handler and then
    # "always" issuing every warning does the same thing a bit
    # less efficiently, but does not register warinings.
    warnings.simplefilter('always')
    warnings.showwarning = lambda *a, **ka: None

def main():
    disable_warnings()
    if kaiten.constants.mock:
        kaiten.constants._setup_paths()
    global log
    log = kaiten.log.getlogger(name='main')
    kaiten.log.init_logging()        
    global event_log
    event_log = kaiten.log.getlogger(name='main', base_logger_name='user_event')
    code = -1
    try:
        print("Kaiten starting up!")
        log_startup()
        config = kaiten.util.get_config()
        enabled = config["kaiten"]["logging"]["enabled"]
        level = config["kaiten"]["logging"]["level"]
        if not enabled:
            # In lieu of disabling the logging we just set the level
            # to something that we will probably never go over.
            level = 9000
        kaiten.log.set_logging_level(level)
        for signal_name in SIGNALS:
            signal.signal(getattr(signal, signal_name), handle_signal)
        global server
        server = kaiten.server.Server(config)
        code = server.run()
    except Exception as e:
        print("Kaiten crash! {0}".format(repr(e)))
        log.error("Error, stopping main", exc_info=True)
    return code

if '__main__' == __name__: # pragma: no cover
    sys.exit(main())
