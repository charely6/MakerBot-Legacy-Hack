"""A generic activity.

Used as a superclass for all other activities
"""

import kaiten.enum
from kaiten.activities import ActivityBase

class Activity(ActivityBase):

    def __init__(self, machine_manager, pymach, config):
        super().__init__(machine_manager, pymach, config)
        self._sub_activity = None
        self.events = kaiten.enum.enum("events")
        self._event_callbacks = {}
        # initiate this here, so cancel can ensure cleanup completes
        self.cleanup_generator = self._cleanup()

    def run(self):
        """
        Superclass Implementation
        """
        yield

    def cancel(self, error_dict=None):
        """
        Superclass Implementation
        """
        yield

    def _cleanup(self):
        """
        Superclass Implementation
        """
        yield

    def set_event_handler(self, event, callback):
        """
        event should be an enum member of self.events.
        Events can be used for things such as invoking
        step changes
        """
        self._event_callbacks[event] = callback

    def _fire_event(self, event, *args, **kwargs):
        """
        called internally by activities to trigger event
        callbacks
        """
        if event in self._event_callbacks:
            self._event_callbacks[event](*args, **kwargs)