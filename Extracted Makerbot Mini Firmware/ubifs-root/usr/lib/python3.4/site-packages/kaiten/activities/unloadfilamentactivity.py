"""This activity handles unloading filament.

This activity assumes that the bot is in the proper heated state.
"""

import kaiten.util
from kaiten.activities import LoadFilamentActivity

class UnloadFilamentActivity(LoadFilamentActivity):

    def __init__(self, machine_manager, pymach, config, *,
                 tool_index=0, from_suspend=False, as_autounload=False):
        super().__init__(machine_manager, pymach, config,
            tool_index=tool_index)
        self._mm_phase_1 = -1 * self._config["filament"]["unload_distance_one"] # movement distance
        if from_suspend and self._config["filament"]["subtract_suspend_retract"]:
            # We have already retracted a bit because we suspended
            self._mm_phase_1 += self._config["suspend"]["retract_distance"]
        if as_autounload:
            self._log.info("Using autounload movement distance")
            self._mm_phase_2 = -1 * self._config["filament"]["auto_unload_distance"]
        else:
            self._mm_phase_2 = -1 * self._config["filament"]["unload_distance_two"] # movement distance
        self._movement_speed_phase_1 = self._config["filament"]["unload_speed_one"]
        self._movement_speed_phase_2 = self._config["filament"]["unload_speed_two"]
        self._delay = self._config["filament"]["unload_delay"]
        self._mixpanel_event_name = "unload_filament"
        if self._assist:
            self._assisted_unload_distance_one = self._config["filament"]["assisted_unload_distance_one"]
            self._assisted_unload_speed_one = self._config["filament"]["assisted_unload_speed_one"]


    def _move_assist_one(self):
        """ Long reverse move on the assist axis"""
        yield from self._pymach.move_axis(self._assist,
            -self._assisted_unload_distance_one,
            self._assisted_unload_speed_one, True)

    def _move_incremental(self, axis):
        """ Move an axis a short distance"""
        yield from self._pymach.move_axis(axis,
            -self._assisted_load_distance_incremental,
            self._assisted_load_speed_incremental, True)

    def _do_move(self):
        yield from self._pymach.move_axis(self._axis, self._mm_phase_1, self._movement_speed_phase_1, True)
        yield from kaiten.util.sleep(self._delay)
        yield from self._pymach.move_axis(self._axis, self._mm_phase_2, self._movement_speed_phase_2, True)
        yield from self._pru_delay_loop()
        # Filament is out of the tool so retract filament back to the spool
        if self._assist:
            yield from self._pymach.assist_enable(True)
            yield from self._move_assist_one()
            while self._pymach.get_presence(self._assist):
                yield from self._move_incremental(self._assist)
                yield from self._pru_delay_loop()
        yield
