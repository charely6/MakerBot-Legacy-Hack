import datetime
import logging

import kaiten.error

from kaiten.processes.process import Process

class MachineQueryProcess(Process):
    def __init__(self, machine_manager, pymach, config,
                 machine_func, params, name=None, ignore_tool_errors=False):
        self._machine_func = machine_func
        self._args = []
        self._kwargs = params
        super(MachineQueryProcess, self).__init__(machine_manager,
                                                  pymach,
                                                  config,
                                                  name)
        self._machine_func = machine_func
        self._params = params
        self._ignore_tool_errors = ignore_tool_errors
        if self._ignore_tool_errors:
            self.ignore_all_toolhead_errors()
        else:
            self.ignorable_toolhead_errors.update([
                kaiten.error.no_filament,
                kaiten.error.filament_slip,
            ])
        self._res = None

    def _do_run(self):
        try:
            # this avoids an exception if no params are provided
            if self._kwargs is None:
                self._res = yield from self._call_pymach(self._machine_func,
                                                         *self._args)
            else:
                self._res = yield from self._call_pymach(self._machine_func,
                                                         *self._args,
                                                         **self._kwargs)
        except Exception as e:
            self._log.info("Error running")
            raise

    def get_info_dict(self):
        if isinstance(self._res, tuple):
            result = list(self._res)
        else:
            result = self._res
        info = {
            'machine_func': self._machine_func,
            'params': self._params,
            'ignore_tool_errors': self._ignore_tool_errors,
            "result": result
        }
        info.update(super(MachineQueryProcess, self).get_info_dict())
        return info

    def contract_duration(self):
        return datetime.timedelta(0, 0, 0, 1)
