"""This activity handles basic homing.

This should really only be used for X and Y homing.
Z-Homing has a separate activity."""

from kaiten.activities import Activity

class XYHomeActivity(Activity):
    def __init__(self, machine_manager, pymach, config, axis, **kwargs):
        super().__init__(machine_manager, pymach, config)
        self._axis = axis
        self._home_settings = self._config["home"]
        self._kwargs = kwargs
        self.failed = False

    def run(self):
        yield from self._pymach.toggle_acceleration_lookahead(False)
        yield from self._home_axis(self._axis)

    def cancel(self, error_dict=None):
        yield from self._pymach.abort()

    def _cleanup(self):
        yield from self._pymach.toggle_acceleration_lookahead(True)
        if self.failed:
            self._log.info("HOME: XY home cleaning up failed home for axis {0}".format(self._axis))
            yield from self._pymach.set_position(self._axis, 0)


    def _home_axis(self, axis, **kwargs):
        self._log.debug("HOME: axis %s", axis)
        self.failed = True
        if not self._axis:
            self._axis = axis
        axis = axis.lower()
        speed = self._home_settings["rate_mm_per_s"].get(axis)
        move_away_distance = self._home_settings["move_away_mm"].get(axis)
        move_away_direction = self._home_settings["direction"].get(axis) * -1

        yield from self._ensure_move_axis(
            axis,
            move_away_distance * move_away_direction,
            speed,
            True)
        if self._kwargs: #test for any falsy/truthy values
            pymach_kwargs = self._kwargs
            self._log.info("using self.kwargs")
        else:
            pymach_kwargs = kwargs
            self._log.info("using input kwargs")
        yield from self._pymach.home_axis(
            axis,
            speed,
            **pymach_kwargs)
        self.failed = False
