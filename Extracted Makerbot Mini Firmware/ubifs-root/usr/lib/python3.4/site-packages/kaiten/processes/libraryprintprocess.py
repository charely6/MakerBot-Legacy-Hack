import os

import kaiten.constants
import kaiten.error
import kaiten.thingiverse
import kaiten.util
import random
from kaiten.processes.printprocess import PrintProcess

class LibraryPrintProcess(PrintProcess):
    def __init__(self, *args, layout_id, **kwargs):
        super(LibraryPrintProcess, self).__init__(*args, **kwargs)
        # Make this look like a normal print
        self._name = "PrintProcess"
        self._layout_id = layout_id
        self._library_print_steps = kaiten.enum.enum("library_print_steps",
            "slice_queued",
            "slicing",
            "downloading")
        self._layout_slice = None
        self._file_download = None

    def _set_filepath(self):
        """
        Override implementation
        """
        self._machine_manager._server.analytics_event("library_print_started",
            label=self._method)
        if not self._client.account:
            self._log.error("Attempted layout print without an account")
            yield kaiten.error.printing_network_error
        mb_tokens = self._client.account.makerbot_tokens
        if not mb_tokens:
            self._log.error("Attempted layout print without a token")
            yield kaiten.error.printing_network_error
        mb_token = random.choice(mb_tokens)
        if not self._machine_manager._server.is_online():
            self._log.error("Attempted layout print while offline")
            yield kaiten.error.printing_network_error
        try:
            self._log.info("Loading layout id: {0}".format(self._layout_id))
            layout = kaiten.thingiverse.Layout(
                mb_token,
                self._machine_manager._server,
                self._config)
            layout.load_from_id(self._layout_id)
            while layout.id() is None:
                layout.check_error_response()
                yield
            # Printerpanel uses the filename for displaying the file name
            filename = "{0}.makerbot".format(layout.get("name"))
            self.filename = layout.get("name")
            current_print_dir = kaiten.constants.current_print_dir
            filepath = os.path.join(current_print_dir, filename)
        except kaiten.error.ThingiverseException:
            yield kaiten.error.printing_network_error
        # Cloud slice if we need to and get the s3 download URL
        self._layout_slice = kaiten.thingiverse.Slice(
            mb_token,
            self._machine_manager._server,
            self._layout_id)
        self._log.info("Checking slice {} ...".format(filepath))
        self._layout_slice.start()
        self.filepath = filepath
        yield from self._do_clear_build_plate()
        cached_slice_state = None
        while self._layout_slice.state != self._layout_slice.states.sliced and \
            not self._layout_slice.error:
            if self._layout_slice.state != cached_slice_state or \
             self._progress != self._layout_slice.slice_progress:
                cached_slice_state = self._layout_slice.state
                if self._layout_slice.state == self._layout_slice.states.queued:
                    self._log.info("Layout slice queued")
                    self._step_change(self._library_print_steps.slice_queued)
                if self._layout_slice.state == self._layout_slice.states.slicing:
                    self._log.info("Layout slicing: {0}".format(
                        self._layout_slice.slice_progress))
                    self._step_change(self._library_print_steps.slicing)
                    self._progress = self._layout_slice.slice_progress
            yield
        if self._layout_slice.error:
            if self._layout_slice.failed_slice:
                yield kaiten.error.cloud_slicing_error
            else:
                yield kaiten.error.printing_network_error
        # Download the file
        self._progress = 0 # reset progress
        self._step_change(self._library_print_steps.downloading)
        url = self._layout_slice.s3_download_url
        self._layout_slice = None
        if not url:
            self._log.error("URL not provided from slice")
            yield kaiten.error.printing_network_error
        self._file_download = kaiten.util.FileDownload(
            self._machine_manager._server,
            url, filepath)
        self._file_download.start()
        while not self._file_download.complete:
            self._progress = self._file_download.progress()
            yield
        if self._file_download.error:
            yield kaiten.error.printing_network_error
        self._file_download = None
        # We've downloaded the file, set the filepath
        self.filepath = filepath
        self._machine_manager._server.notify_client('lcd', 'print_file_valid',
                                                    {'filepath': self.filepath})
        self._step_change(self._print_steps.initializing)

    def _do_cleanup(self):
        # Cover edge cases to ensure we:
        # 1. stop polling for slice status and
        # 2. close the fd we were downloading to
        if self._layout_slice is not None:
            self._layout_slice.cancel()
        if self._file_download is not None:
            self._file_download.close()
        yield from super(LibraryPrintProcess, self)._do_cleanup()






