import os
import urllib.parse

import kaiten.constants
import kaiten.error
import kaiten.thingiverse
import kaiten.util
from kaiten.processes.printprocess import PrintProcess

class ExternalPrintProcess(PrintProcess):
    def __init__(self, *args, url, **kwargs):
        super(ExternalPrintProcess, self).__init__(*args, **kwargs)
        # Make this look like a normal print
        self._name = "PrintProcess"
        self._url = url
        self._external_print_steps = kaiten.enum.enum("external_print_steps",
            "downloadingext")
        self._file_download = None
        self._response_ready = False
        self._error_response = False

    def _set_filepath(self):
        """
        Override implementation
        """
        if not self._machine_manager._server.is_online():
            self._log.error("Attempted external print while offline")
            yield kaiten.error.printing_network_error

        self._log.info("external print process: {0}".format(self._url))

        parsed = urllib.parse.urlparse(self._url)
        filename = parsed.path.rsplit('/',1)[-1]
        self.filename = filename.rsplit('.',1)[0]
        filetype = filename.rsplit('.',1)[-1]
        if (filetype.lower() != "makerbot"):
            self._log.error("External filetype must be .makerbot")
            yield kaiten.error.printing_url_error
        current_print_dir = kaiten.constants.current_print_dir
        filepath = os.path.join(current_print_dir, filename)

        # Download the file
        self._progress = 0 # reset progress
        self._step_change(self._external_print_steps.downloadingext)
        if not self._url:
            self._log.error("URL not provided")
            yield kaiten.error.printing_url_error
        self._file_download = kaiten.util.FileDownload(
            self._machine_manager._server,
            self._url, filepath)
        self._file_download.start()
        while not self._file_download.complete:
            self._progress = self._file_download.progress()
            yield
        if self._file_download.error == True:
            yield kaiten.error.printing_url_error
        self._file_download = None
        # We've downloaded the file, set the filepath
        self.filepath = filepath
        self._machine_manager._server.notify_client('lcd', 'print_file_valid',
                                                    {'filepath': self.filepath})
        self._step_change(self._print_steps.initializing)

    def _do_cleanup(self):
        # Cover edge cases to ensure we:
        # 1. stop polling for slice status and
        # 2. close the fd we were downloading to
        if self._file_download is not None:
            self._file_download.close()
        yield from super(ExternalPrintProcess, self)._do_cleanup()






