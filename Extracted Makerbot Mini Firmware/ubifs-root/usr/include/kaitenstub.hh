// This file is automatically generated -- do not edit it!

#ifndef KAITENSTUB_HH_
#define KAITENSTUB_HH_

#include <memory>
#include <string>
#include <boost/optional.hpp>
#include <boost/log/trivial.hpp>
#include <jsoncpp/json/value.h>
#include <jsonrpc/jsonrpccallback.h>
#include "ikrpccontroller.hh"

namespace krpc {
class KaitenStub {
 public:
  KaitenStub(Controller* controller)
    : m_controller(controller) {}
  void add_local_auth(const std::string username,const std::string local_secret,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["username"] = username;
  rpc_params["local_secret"] = local_secret;
    m_controller->invoke("add_local_auth", rpc_params, callback);
  }



  void add_makerbot_account(const std::string username,const std::string makerbot_token,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["username"] = username;
  rpc_params["makerbot_token"] = makerbot_token;
    m_controller->invoke("add_makerbot_account", rpc_params, callback);
  }



  void authenticate(const std::string access_token,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["access_token"] = access_token;
    m_controller->invoke("authenticate", rpc_params, callback);
  }



  void authorize(const std::string username,boost::optional<const std::string> makerbot_token=boost::none,boost::optional<const std::string> local_secret=boost::none,boost::optional<const bool> chamber_blink=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["username"] = username;
    if (makerbot_token != boost::none)
      rpc_params["makerbot_token"] = makerbot_token.get();
    if (local_secret != boost::none)
      rpc_params["local_secret"] = local_secret.get();
    if (chamber_blink != boost::none)
      rpc_params["chamber_blink"] = chamber_blink.get();
    m_controller->invoke("authorize", rpc_params, callback);
  }

  void authorize(const std::string username,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for authorize";
    authorize(username,boost::none,boost::none,boost::none,callback);
  }

  void clear_authorized(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("clear_authorized", rpc_params, callback);
  }



  void deauthorize(const std::string username,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["username"] = username;
    m_controller->invoke("deauthorize", rpc_params, callback);
  }



  void fcgi_reauthorize(const std::string local_secret,const std::string local_code,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["local_secret"] = local_secret;
  rpc_params["local_code"] = local_code;
    m_controller->invoke("fcgi_reauthorize", rpc_params, callback);
  }



  void get_authorized(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_authorized", rpc_params, callback);
  }



  void reauthorize(const std::string username,boost::optional<const std::string> makerbot_token=boost::none,boost::optional<const std::string> local_secret=boost::none,boost::optional<const std::string> local_code=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["username"] = username;
    if (makerbot_token != boost::none)
      rpc_params["makerbot_token"] = makerbot_token.get();
    if (local_secret != boost::none)
      rpc_params["local_secret"] = local_secret.get();
    if (local_code != boost::none)
      rpc_params["local_code"] = local_code.get();
    m_controller->invoke("reauthorize", rpc_params, callback);
  }

  void reauthorize(const std::string username,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for reauthorize";
    reauthorize(username,boost::none,boost::none,boost::none,callback);
  }

  void wifi_fre_authorize(const std::string username,boost::optional<const std::string> makerbot_token=boost::none,boost::optional<const std::string> local_secret=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["username"] = username;
    if (makerbot_token != boost::none)
      rpc_params["makerbot_token"] = makerbot_token.get();
    if (local_secret != boost::none)
      rpc_params["local_secret"] = local_secret.get();
    m_controller->invoke("wifi_fre_authorize", rpc_params, callback);
  }

  void wifi_fre_authorize(const std::string username,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for wifi_fre_authorize";
    wifi_fre_authorize(username,boost::none,boost::none,callback);
  }

  void get_static_ipv4(const std::string service_path,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["service_path"] = service_path;
    m_controller->invoke("get_static_ipv4", rpc_params, callback);
  }



  void set_static_ipv4(const std::string service_path,boost::optional<const std::string> ip=boost::none,boost::optional<const std::string> netmask=boost::none,boost::optional<const std::string> gateway=boost::none,boost::optional<const Json::Value> dns=boost::none,boost::optional<const bool> use_static=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["service_path"] = service_path;
    if (ip != boost::none)
      rpc_params["ip"] = ip.get();
    if (netmask != boost::none)
      rpc_params["netmask"] = netmask.get();
    if (gateway != boost::none)
      rpc_params["gateway"] = gateway.get();
    if (dns != boost::none)
      rpc_params["dns"] = dns.get();
    if (use_static != boost::none)
      rpc_params["use_static"] = use_static.get();
    m_controller->invoke("set_static_ipv4", rpc_params, callback);
  }

  void set_static_ipv4(const std::string service_path,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for set_static_ipv4";
    set_static_ipv4(service_path,boost::none,boost::none,boost::none,boost::none,boost::none,callback);
  }

  void wifi_connect(const std::string path,boost::optional<const std::string> password=boost::none,boost::optional<const std::string> name=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["path"] = path;
    if (password != boost::none)
      rpc_params["password"] = password.get();
    if (name != boost::none)
      rpc_params["name"] = name.get();
    m_controller->invoke("wifi_connect", rpc_params, callback);
  }

  void wifi_connect(const std::string path,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for wifi_connect";
    wifi_connect(path,boost::none,boost::none,callback);
  }

  void wifi_disable(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("wifi_disable", rpc_params, callback);
  }



  void wifi_disconnect(boost::optional<const std::string> path=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (path != boost::none)
      rpc_params["path"] = path.get();
    m_controller->invoke("wifi_disconnect", rpc_params, callback);
  }

  void wifi_disconnect(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for wifi_disconnect";
    wifi_disconnect(boost::none,callback);
  }

  void wifi_enable(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("wifi_enable", rpc_params, callback);
  }



  void wifi_forget(boost::optional<const std::string> path=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (path != boost::none)
      rpc_params["path"] = path.get();
    m_controller->invoke("wifi_forget", rpc_params, callback);
  }

  void wifi_forget(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for wifi_forget";
    wifi_forget(boost::none,callback);
  }

  void wifi_reset(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("wifi_reset", rpc_params, callback);
  }



  void wifi_scan(boost::optional<const bool> force_rescan=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (force_rescan != boost::none)
      rpc_params["force_rescan"] = force_rescan.get();
    m_controller->invoke("wifi_scan", rpc_params, callback);
  }

  void wifi_scan(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for wifi_scan";
    wifi_scan(boost::none,callback);
  }

  void acknowledged(boost::optional<const int> error_id=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (error_id != boost::none)
      rpc_params["error_id"] = error_id.get();
    m_controller->invoke("acknowledged", rpc_params, callback);
  }

  void acknowledged(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for acknowledged";
    acknowledged(boost::none,callback);
  }

  void assisted_level(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("assisted_level", rpc_params, callback);
  }



  void bot_maintained(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("bot_maintained", rpc_params, callback);
  }



  void bronx_upload(const std::string filepath,const int toolhead,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["filepath"] = filepath;
  rpc_params["toolhead"] = toolhead;
    m_controller->invoke("bronx_upload", rpc_params, callback);
  }



  void brooklyn_upload(const std::string filepath,boost::optional<const bool> transfer_wait=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["filepath"] = filepath;
    if (transfer_wait != boost::none)
      rpc_params["transfer_wait"] = transfer_wait.get();
    m_controller->invoke("brooklyn_upload", rpc_params, callback);
  }

  void brooklyn_upload(const std::string filepath,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for brooklyn_upload";
    brooklyn_upload(filepath,boost::none,callback);
  }

  void calibrate_z_offset(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("calibrate_z_offset", rpc_params, callback);
  }



  void cancel(boost::optional<const bool> force=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (force != boost::none)
      rpc_params["force"] = force.get();
    m_controller->invoke("cancel", rpc_params, callback);
  }

  void cancel(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for cancel";
    cancel(boost::none,callback);
  }

  void clear_all_z_pause(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("clear_all_z_pause", rpc_params, callback);
  }



  void clear_queue(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("clear_queue", rpc_params, callback);
  }



  void clear_ssh_id(boost::optional<const std::string> filepath=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (filepath != boost::none)
      rpc_params["filepath"] = filepath.get();
    m_controller->invoke("clear_ssh_id", rpc_params, callback);
  }

  void clear_ssh_id(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for clear_ssh_id";
    clear_ssh_id(boost::none,callback);
  }

  void clear_z_pause_mm(const int z_pause_mm,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["z_pause_mm"] = z_pause_mm;
    m_controller->invoke("clear_z_pause_mm", rpc_params, callback);
  }



  void close_queue(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("close_queue", rpc_params, callback);
  }



  void cloud_slice_print(const std::string url,boost::optional<const bool> ensure_build_plate_clear=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["url"] = url;
    if (ensure_build_plate_clear != boost::none)
      rpc_params["ensure_build_plate_clear"] = ensure_build_plate_clear.get();
    m_controller->invoke("cloud_slice_print", rpc_params, callback);
  }

  void cloud_slice_print(const std::string url,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for cloud_slice_print";
    cloud_slice_print(url,boost::none,callback);
  }

  void cool(boost::optional<const bool> ignore_tool_errors=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (ignore_tool_errors != boost::none)
      rpc_params["ignore_tool_errors"] = ignore_tool_errors.get();
    m_controller->invoke("cool", rpc_params, callback);
  }

  void cool(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for cool";
    cool(boost::none,callback);
  }

  void copy_ssh_id(boost::optional<const std::string> filepath=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (filepath != boost::none)
      rpc_params["filepath"] = filepath.get();
    m_controller->invoke("copy_ssh_id", rpc_params, callback);
  }

  void copy_ssh_id(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for copy_ssh_id";
    copy_ssh_id(boost::none,callback);
  }

  void disable_check_build_plate(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("disable_check_build_plate", rpc_params, callback);
  }



  void disable_leds(boost::optional<const bool> disable_knob=boost::none,boost::optional<const bool> disable_chamber=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (disable_knob != boost::none)
      rpc_params["disable_knob"] = disable_knob.get();
    if (disable_chamber != boost::none)
      rpc_params["disable_chamber"] = disable_chamber.get();
    m_controller->invoke("disable_leds", rpc_params, callback);
  }

  void disable_leds(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for disable_leds";
    disable_leds(boost::none,boost::none,callback);
  }

  void disable_z_pause(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("disable_z_pause", rpc_params, callback);
  }



  void download_and_install_firmware(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("download_and_install_firmware", rpc_params, callback);
  }



  void drm_print(const int layout_id,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["layout_id"] = layout_id;
    m_controller->invoke("drm_print", rpc_params, callback);
  }



  void dump_machine_config(const std::string path,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["path"] = path;
    m_controller->invoke("dump_machine_config", rpc_params, callback);
  }



  void enable_check_build_plate(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("enable_check_build_plate", rpc_params, callback);
  }



  void enable_leds(boost::optional<const bool> enable_knob=boost::none,boost::optional<const bool> enable_chamber=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (enable_knob != boost::none)
      rpc_params["enable_knob"] = enable_knob.get();
    if (enable_chamber != boost::none)
      rpc_params["enable_chamber"] = enable_chamber.get();
    m_controller->invoke("enable_leds", rpc_params, callback);
  }

  void enable_leds(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for enable_leds";
    enable_leds(boost::none,boost::none,callback);
  }

  void enable_z_pause(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("enable_z_pause", rpc_params, callback);
  }



  void execute_queue(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("execute_queue", rpc_params, callback);
  }



  void external_print(const std::string url,boost::optional<const bool> ensure_build_plate_clear=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["url"] = url;
    if (ensure_build_plate_clear != boost::none)
      rpc_params["ensure_build_plate_clear"] = ensure_build_plate_clear.get();
    m_controller->invoke("external_print", rpc_params, callback);
  }

  void external_print(const std::string url,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for external_print";
    external_print(url,boost::none,callback);
  }

  void firmware_cleanup(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("firmware_cleanup", rpc_params, callback);
  }



  void get_available_z_offset_adjustment(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_available_z_offset_adjustment", rpc_params, callback);
  }



  void get_machine_config(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_machine_config", rpc_params, callback);
  }



  void get_persistent_statistics(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_persistent_statistics", rpc_params, callback);
  }



  void get_print_history(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_print_history", rpc_params, callback);
  }



  void get_queue_status(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_queue_status", rpc_params, callback);
  }



  void get_sound_state(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_sound_state", rpc_params, callback);
  }



  void get_statistics(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_statistics", rpc_params, callback);
  }



  void get_tool_usage_stats(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_tool_usage_stats", rpc_params, callback);
  }



  void get_z_adjusted_offset(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_z_adjusted_offset", rpc_params, callback);
  }



  void has_z_calibration_routine(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("has_z_calibration_routine", rpc_params, callback);
  }



  void home(const Json::Value axes,boost::optional<const bool> preheat=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["axes"] = axes;
    if (preheat != boost::none)
      rpc_params["preheat"] = preheat.get();
    m_controller->invoke("home", rpc_params, callback);
  }

  void home(const Json::Value axes,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for home";
    home(axes,boost::none,callback);
  }

  void is_endstop_triggered(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("is_endstop_triggered", rpc_params, callback);
  }



  void kill_power(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("kill_power", rpc_params, callback);
  }



  void library_print(const int layout_id,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["layout_id"] = layout_id;
    m_controller->invoke("library_print", rpc_params, callback);
  }



  void load_filament(const int tool_index,boost::optional<const Json::Value> temperature_settings=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["tool_index"] = tool_index;
    if (temperature_settings != boost::none)
      rpc_params["temperature_settings"] = temperature_settings.get();
    m_controller->invoke("load_filament", rpc_params, callback);
  }

  void load_filament(const int tool_index,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for load_filament";
    load_filament(tool_index,boost::none,callback);
  }

  void load_print_tool(const int index,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["index"] = index;
    m_controller->invoke("load_print_tool", rpc_params, callback);
  }



  void machine_action_command(const std::string machine_func,const Json::Value params,boost::optional<const std::string> name=boost::none,boost::optional<const bool> ignore_tool_errors=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["machine_func"] = machine_func;
  rpc_params["params"] = params;
    if (name != boost::none)
      rpc_params["name"] = name.get();
    if (ignore_tool_errors != boost::none)
      rpc_params["ignore_tool_errors"] = ignore_tool_errors.get();
    m_controller->invoke("machine_action_command", rpc_params, callback);
  }

  void machine_action_command(const std::string machine_func,const Json::Value params,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for machine_action_command";
    machine_action_command(machine_func,params,boost::none,boost::none,callback);
  }

  void machine_query_command(const std::string machine_func,const Json::Value params,boost::optional<const bool> ignore_tool_errors=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["machine_func"] = machine_func;
  rpc_params["params"] = params;
    if (ignore_tool_errors != boost::none)
      rpc_params["ignore_tool_errors"] = ignore_tool_errors.get();
    m_controller->invoke("machine_query_command", rpc_params, callback);
  }

  void machine_query_command(const std::string machine_func,const Json::Value params,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for machine_query_command";
    machine_query_command(machine_func,params,boost::none,callback);
  }

  void machine_query_process(const std::string machine_func,const Json::Value params,const std::string name,boost::optional<const bool> ignore_tool_errors=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["machine_func"] = machine_func;
  rpc_params["params"] = params;
  rpc_params["name"] = name;
    if (ignore_tool_errors != boost::none)
      rpc_params["ignore_tool_errors"] = ignore_tool_errors.get();
    m_controller->invoke("machine_query_process", rpc_params, callback);
  }

  void machine_query_process(const std::string machine_func,const Json::Value params,const std::string name,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for machine_query_process";
    machine_query_process(machine_func,params,name,boost::none,callback);
  }

  void manual_level(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("manual_level", rpc_params, callback);
  }



  void open_queue(const bool clear,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["clear"] = clear;
    m_controller->invoke("open_queue", rpc_params, callback);
  }



  void park(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("park", rpc_params, callback);
  }



  void preheat(boost::optional<const Json::Value> temperature_settings=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (temperature_settings != boost::none)
      rpc_params["temperature_settings"] = temperature_settings.get();
    m_controller->invoke("preheat", rpc_params, callback);
  }

  void preheat(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for preheat";
    preheat(boost::none,callback);
  }

  void print(const std::string filepath,boost::optional<const bool> ensure_build_plate_clear=boost::none,boost::optional<const bool> transfer_wait=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["filepath"] = filepath;
    if (ensure_build_plate_clear != boost::none)
      rpc_params["ensure_build_plate_clear"] = ensure_build_plate_clear.get();
    if (transfer_wait != boost::none)
      rpc_params["transfer_wait"] = transfer_wait.get();
    m_controller->invoke("print", rpc_params, callback);
  }

  void print(const std::string filepath,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for print";
    print(filepath,boost::none,boost::none,callback);
  }

  void print_again(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("print_again", rpc_params, callback);
  }



  void process_method(const std::string method,boost::optional<const Json::Value> params=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["method"] = method;
    if (params != boost::none)
      rpc_params["params"] = params.get();
    m_controller->invoke("process_method", rpc_params, callback);
  }

  void process_method(const std::string method,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for process_method";
    process_method(method,boost::none,callback);
  }

  void reboot(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("reboot", rpc_params, callback);
  }



  void reset_lcd(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("reset_lcd", rpc_params, callback);
  }



  void reset_to_factory(boost::optional<const bool> clear_calibration=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (clear_calibration != boost::none)
      rpc_params["clear_calibration"] = clear_calibration.get();
    m_controller->invoke("reset_to_factory", rpc_params, callback);
  }

  void reset_to_factory(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for reset_to_factory";
    reset_to_factory(boost::none,callback);
  }

  void resume_boot(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("resume_boot", rpc_params, callback);
  }



  void run_diagnostics(const Json::Value tests,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["tests"] = tests;
    m_controller->invoke("run_diagnostics", rpc_params, callback);
  }



  void set_auto_unload(const std::string unload_case,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["unload_case"] = unload_case;
    m_controller->invoke("set_auto_unload", rpc_params, callback);
  }



  void set_toolhead_error_visibility(const std::string error,const bool ignored,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["error"] = error;
  rpc_params["ignored"] = ignored;
    m_controller->invoke("set_toolhead_error_visibility", rpc_params, callback);
  }



  void set_z_adjusted_offset(const float offset,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["offset"] = offset;
    m_controller->invoke("set_z_adjusted_offset", rpc_params, callback);
  }



  void set_z_pause_mm(const int z_pause_mm,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["z_pause_mm"] = z_pause_mm;
    m_controller->invoke("set_z_pause_mm", rpc_params, callback);
  }



  void setup_printer(boost::optional<const bool> jump_to_wifi_setup=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (jump_to_wifi_setup != boost::none)
      rpc_params["jump_to_wifi_setup"] = jump_to_wifi_setup.get();
    m_controller->invoke("setup_printer", rpc_params, callback);
  }

  void setup_printer(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for setup_printer";
    setup_printer(boost::none,callback);
  }

  void toggle_sound(const bool state,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["state"] = state;
    m_controller->invoke("toggle_sound", rpc_params, callback);
  }



  void unload_filament(const int tool_index,boost::optional<const Json::Value> temperature_settings=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["tool_index"] = tool_index;
    if (temperature_settings != boost::none)
      rpc_params["temperature_settings"] = temperature_settings.get();
    m_controller->invoke("unload_filament", rpc_params, callback);
  }

  void unload_filament(const int tool_index,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for unload_filament";
    unload_filament(tool_index,boost::none,callback);
  }

  void wifi_setup(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("wifi_setup", rpc_params, callback);
  }



  void wifi_signal_strength(const std::string ssid,const std::string iface,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["ssid"] = ssid;
  rpc_params["iface"] = iface;
    m_controller->invoke("wifi_signal_strength", rpc_params, callback);
  }



  void yonkers_upload(const std::string filepath,const std::string uid,const int index,boost::optional<const bool> force=boost::none,boost::optional<const int> id=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["filepath"] = filepath;
  rpc_params["uid"] = uid;
  rpc_params["index"] = index;
    if (force != boost::none)
      rpc_params["force"] = force.get();
    if (id != boost::none)
      rpc_params["id"] = id.get();
    m_controller->invoke("yonkers_upload", rpc_params, callback);
  }

  void yonkers_upload(const std::string filepath,const std::string uid,const int index,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for yonkers_upload";
    yonkers_upload(filepath,uid,index,boost::none,boost::none,callback);
  }

  void zip_logs(const std::string zip_path,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["zip_path"] = zip_path;
    m_controller->invoke("zip_logs", rpc_params, callback);
  }



  void birdwing_list(const std::string path,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["path"] = path;
    m_controller->invoke("birdwing_list", rpc_params, callback);
  }



  void capture_image(const std::string output_file,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["output_file"] = output_file;
    m_controller->invoke("capture_image", rpc_params, callback);
  }



  void change_machine_name(const std::string machine_name,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["machine_name"] = machine_name;
    m_controller->invoke("change_machine_name", rpc_params, callback);
  }



  void desync_account(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("desync_account", rpc_params, callback);
  }



  void end_camera_stream(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("end_camera_stream", rpc_params, callback);
  }



  void expire_thingiverse_credentials(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("expire_thingiverse_credentials", rpc_params, callback);
  }



  void first_contact(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("first_contact", rpc_params, callback);
  }



  void get_cloud_services_info(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_cloud_services_info", rpc_params, callback);
  }



  void get_config(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_config", rpc_params, callback);
  }



  void get_system_information(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_system_information", rpc_params, callback);
  }



  void handshake(boost::optional<const std::string> username=boost::none,boost::optional<const std::string> host_version=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (username != boost::none)
      rpc_params["username"] = username.get();
    if (host_version != boost::none)
      rpc_params["host_version"] = host_version.get();
    m_controller->invoke("handshake", rpc_params, callback);
  }

  void handshake(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for handshake";
    handshake(boost::none,boost::none,callback);
  }

  void network_state(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("network_state", rpc_params, callback);
  }



  void ping(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("ping", rpc_params, callback);
  }



  void register_client_name(const std::string name,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["name"] = name;
    m_controller->invoke("register_client_name", rpc_params, callback);
  }



  void register_fcgi(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("register_fcgi", rpc_params, callback);
  }



  void register_lcd(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("register_lcd", rpc_params, callback);
  }



  void request_camera_frame(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("request_camera_frame", rpc_params, callback);
  }



  void request_camera_stream(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("request_camera_stream", rpc_params, callback);
  }



  void restart_ui(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("restart_ui", rpc_params, callback);
  }



  void set_analytics_enabled(const bool enabled,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["enabled"] = enabled;
    m_controller->invoke("set_analytics_enabled", rpc_params, callback);
  }



  void set_reflector_enabled(const bool enabled,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["enabled"] = enabled;
    m_controller->invoke("set_reflector_enabled", rpc_params, callback);
  }



  void set_thingiverse_credentials(const std::string thingiverse_username,const std::string thingiverse_token,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["thingiverse_username"] = thingiverse_username;
  rpc_params["thingiverse_token"] = thingiverse_token;
    m_controller->invoke("set_thingiverse_credentials", rpc_params, callback);
  }



  void sync_account_to_bot(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("sync_account_to_bot", rpc_params, callback);
  }



  void transfer_progress(const std::string local_path,const int progress,boost::optional<const bool> done=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["local_path"] = local_path;
  rpc_params["progress"] = progress;
    if (done != boost::none)
      rpc_params["done"] = done.get();
    m_controller->invoke("transfer_progress", rpc_params, callback);
  }

  void transfer_progress(const std::string local_path,const int progress,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for transfer_progress";
    transfer_progress(local_path,progress,boost::none,callback);
  }

  void update_available_firmware(boost::optional<const bool> only_notify=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    if (only_notify != boost::none)
      rpc_params["only_notify"] = only_notify.get();
    m_controller->invoke("update_available_firmware", rpc_params, callback);
  }

  void update_available_firmware(const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for update_available_firmware";
    update_available_firmware(boost::none,callback);
  }

  void get_init(const std::string file_path,const int file_id,const int block_size,boost::optional<const bool> do_raw=boost::none,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["file_path"] = file_path;
  rpc_params["file_id"] = file_id;
  rpc_params["block_size"] = block_size;
    if (do_raw != boost::none)
      rpc_params["do_raw"] = do_raw.get();
    m_controller->invoke("get_init", rpc_params, callback);
  }

  void get_init(const std::string file_path,const int file_id,const int block_size,const std::shared_ptr<JsonRpcCallback>& callback) {
    BOOST_LOG_TRIVIAL(debug) << "Called alternate RPC func for get_init";
    get_init(file_path,file_id,block_size,boost::none,callback);
  }

  void put_init(const std::string file_path,const int file_id,const int block_size,const int length,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["file_path"] = file_path;
  rpc_params["file_id"] = file_id;
  rpc_params["block_size"] = block_size;
  rpc_params["length"] = length;
    m_controller->invoke("put_init", rpc_params, callback);
  }



  void put_raw(const int file_id,const int length,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["file_id"] = file_id;
  rpc_params["length"] = length;
    m_controller->invoke("put_raw", rpc_params, callback);
  }



  void put_term(const int file_id,const int length,const int crc,const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
  rpc_params["file_id"] = file_id;
  rpc_params["length"] = length;
  rpc_params["crc"] = crc;
    m_controller->invoke("put_term", rpc_params, callback);
  }



  void get_unique_identifiers(const std::shared_ptr<JsonRpcCallback>& callback=std::make_shared<noCB>()) {
    Json::Value rpc_params;
    m_controller->invoke("get_unique_identifiers", rpc_params, callback);
  }




 private:
  Controller* m_controller;

  class noCB : public JsonRpcCallback {
   public:
    void response(const Json::Value& r) { (void)r; };
  };
};
}  // namespace krpc
#endif  // KAITENSTUB_HH_
