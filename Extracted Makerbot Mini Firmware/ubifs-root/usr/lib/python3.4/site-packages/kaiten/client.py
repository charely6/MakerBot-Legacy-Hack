import datetime

class Client:
    """
    Abstract connected client

    Currently this just contains properties to identify the client,
    we do not require any methods that expose access to the connection
    of a client.  The point of this class is to broaden the definition
    of a connected client from a client that we have a jsonrpc socket
    for to a client we can communicate with.
    """
    def __init__(self, name, method, interface):
        self.name = name
        self.method = method
        self.interface = interface
        self.account = None

    def connected(self):
        # Despite the fact that this is only for clients that are
        # connected, because we don't have any kind of connection API
        # currently in this class it is probably best to return False
        return False

    def get_log_name(self):
        return '%s (%s)' % (self.name, self.interface)

class SocketClient(Client):
    """
    Represent a single connected socket client.

    Mostly just a dumb container, the logic for dealing with clients
    still lives in the server object.
    """
    def __init__(self, fileno, jsonrpc, jsonrpc_generator, queue,
                 name, method, interface):
        super().__init__(name, method, interface)
        self.fileno = fileno
        self.jsonrpc = jsonrpc
        self.jsonrpc_generator = jsonrpc_generator
        self.queue = queue
        jsonrpc.set_client(self)
        # Certain classes of items in the queue should be limited to one
        # instance each.  This keeps track of which classes have an item
        # currently in the queue.
        self.limits = set()
        # Just for network logging
        self.created = datetime.datetime.utcnow()
        # IO generators that belong to a client need to get routed to
        # _log_client_disconnect to avoid spamming the log
        jsonrpc_generator.is_client = True
        queue.is_client = True
        # Clients can opt out of receiving broadcast notifications by
        # setting this to False.  Targetted notifications will still
        # be delivered.
        self.do_notify = True

    def connected(self):
        try:
            return self.jsonrpc.connection.fileno() > -1
        except Exception:
            # TODO (Ryan) See BW-3586 figure out why this happens
            return False

    def get_log_name(self):
        peer_name = self.jsonrpc.get_peer_name()
        return '%s (%s)' % (self.name, peer_name)


