import errno
import logging
import os
import os.path
import socket

import kaiten.connection
import kaiten.log


class Listener(object):
    def __init__(self):
        self._log = kaiten.log.getlogger(self)

    def accept(self):
        raise NotImplementedError

    def cleanup(self):
        raise NotImplementedError

    def __enter__(self):  # for 'with' statement support
        pass

    def __exit__(self, exc_type, exc_value, traceback):  # for 'with' statement support
        self.cleanup()
        return False


class _AbstractSocketListener(Listener):
    def __init__(self, socket):
        """
        @param socket a socket.socket object
        """
        Listener.__init__(self)
        self._socket = socket

    def accept(self, ssl_wrap=False):
        try:
            sock, addr = self._socket.accept()
            sock.setblocking(0) # Set nonblocking
        except socket.timeout:
            # NOTE: too spammy
            # self._log.debug('handled exception', exc_info=True)
            raise
        except IOError as e:
            if errno.EINTR == e.args[0]:
                # NOTE: too spammy
                # self._log.debug('handled exception', exc_info=True)
                raise
            else:
                raise
        else:
            self._log_connection(addr)
            connection = kaiten.connection.SocketConnection(
                sock, addr, ssl_wrap=ssl_wrap)
            return connection
    def _log_connection(self, addr):
        raise NotImplementedError

    def fileno(self):
        return self._socket.fileno()



class TcpListener(_AbstractSocketListener):
    def cleanup(self):
        pass

    def _log_connection(self, addr):
        host, port = addr
        self._log.debug('accepted TCP connection: %s:%s', host, port)


class _PosixPipeListener(_AbstractSocketListener):
    def __init__(self, path, socket):
        _AbstractSocketListener.__init__(self, socket)
        self._path = path

    def cleanup(self):
        if os.path.exists(self._path):
            os.unlink(self._path)

    def _log_connection(self, addr):
        self._log.debug('accepted pipe connection')

    def fileno(self):
        return self._socket.fileno()


PipeListener = _PosixPipeListener
