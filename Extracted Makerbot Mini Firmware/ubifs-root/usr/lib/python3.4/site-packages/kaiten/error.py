# Don't import anything else from kaiten here

import mbcoreutils.machine_errors
import mbcoreutils.toolhead_errors

# Usually we just want to reference error codes by name with a
# simple syntax, so we add our lower case error names as attributes
# of this module.  This lets us write kaiten.error.not_ready instead
# of mbcoreutils.machine_errors.error['not_ready'].
globals().update(mbcoreutils.machine_errors.error)
globals().update(mbcoreutils.toolhead_errors.error)

# Lets also make looking up error names slightly easier
error_to_string = {}
error_to_string.update(mbcoreutils.machine_errors.error_to_string)
error_to_string.update(mbcoreutils.toolhead_errors.error_to_string)

# Some of our code also wants access to all toolhead errors as a set.
# I hope someday we no longer need this, but for now you can take this
# value and wrap it in set() (making this a frozenset has the least
# bad consequences of forgetting to wrap this in set()).
toolhead_errors = frozenset(mbcoreutils.toolhead_errors.error.values())

class UnrecognizedToolError(KeyError):
    """ Raised when you try and get a config for an unknown tool type."""
    def __init__(self, tool_type):
        KeyError.__init__(self, tool_type)

class ConnectionWriteException(IOError):
    """ Default connection exception class."""
    pass

class TooManySocketsException(Exception):
    pass

class UserRequestException(Exception):
    def __init__(self, data=None):
        self.data = data
    def __str__(self):
        return 'UserRequestException: %r' % self.data

class ProcessAlreadyRunningException(Exception):
    def __init__(self):
        pass

class ProcessNotCancellableException(Exception):
    def __init__(self):
        pass

class ProcessMethodNotCallableException(Exception):
    def __init__(self):
        pass

class MachineDriverException(Exception):
    def __init__(self, code):
        self.code = code

class CriticalMachineException(Exception):
    def __init__(self):
        pass

class AuthenticationException(Exception):
    def __init__(self):
        pass

class ThingiverseException(Exception):
    def __init__(self):
        pass

## PYMACHINE Errors
class PyMachineError(Exception):
    def __init__(self, msg):
        pass

class InvalidAxisError(PyMachineError):
    def __init__(self, axis):
        self.axis = axis
