import logging
import logging.config
import os
import sys

import kaiten.constants

# The logging format that actually gets used, at the top of the
# file you would expect it to be in.  IMAGINE THAT.
FORMAT_KAITEN = '\n'.join([
    "%(filename)s:%(lineno)d: %(levelname)s",
    "%(name)s:%(funcName)s",
    "%(asctime)s",
    "%(message)s",
    "",
])

FORMAT_EVENT = '\n'.join([
    "%(message)s",
    "",
])


def getlogger(o=None, *, name=None, base_logger_name='kaiten'):
    if o is None:
        if name is None:
            raise TypeError('Missing required argument o')
    elif not hasattr(o, '__module__'):
        name = o.__class__.__name__
    else:
        name = '.'.join((o.__module__, o.__class__.__name__))
    if not name.startswith(base_logger_name+'.'):
        name = base_logger_name + '.' + name
    logger = logging.getLogger(name)
    return logger

def init_logging():
    filename = kaiten.constants.logging_file
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    dct = _get_logging_dct(filename, 'INFO')
    logging.config.dictConfig(dct)

def set_logging_level(level):
    logging.getLogger('kaiten').setLevel(level)

def set_logging_enabled(enabled):
    # TODO: Figure out a way to disable logging reversibly
    raise NotImplementedError

class RotatingFileFaultHandler(logging.handlers.RotatingFileHandler):
    '''
    A rotating file handler that keeps the python fault handler pointing
    to the current log file.
    '''
    def _open(self):
        import faulthandler
        stream = super(RotatingFileFaultHandler, self)._open()
        faulthandler.enable(stream)
        return stream

def _get_logging_dct(filename, level):
    dct = {
        'version': 1,
        'incremental': False,
        'disable_existing_loggers': False,
        'formatters': {
            'kaiten': {
                'format': FORMAT_KAITEN,
                'datefmt': None,
            },
            'user_event': {
                'format': FORMAT_EVENT,
                'datefmt': None,
            }
        },
        'handlers': {
            'kaiten' : {
                'class': 'kaiten.log.RotatingFileFaultHandler',
                'level': 'NOTSET',
                'formatter': 'kaiten',
                'filename': filename,
                'maxBytes': 1024 * 1024,
                'backupCount': 3,
            },
            'user_event' : {
                'class': 'kaiten.log.RotatingFileFaultHandler',
                'level': 'NOTSET',
                'formatter': 'user_event',
                'filename': kaiten.constants.user_event_log_file,
                'maxBytes': 1024 * 1024,
                'backupCount': 3,
            },

        },
        'loggers': {
            'kaiten': {
                'level': level,
                'propagate': False,
                'handlers': ['kaiten'],
            },
            'user_event': {
                'level': level,
                'propagate': False,
                'handlers': ['user_event'],
            }
        },
    }
    return dct

