import datetime
import kaiten.constants
"""
Commonly used generator objects, given their own module to
avoid circular import issues.
"""

class KaitenGenerator(object):
    """
    A generic kaiten generator that takes the output of one iteration and
    inserts it into the next iteration of its internal generator.

    This behavior is stupid and unused, but we do still need something
    to wrap bare python generators since you can't attach arbitrary
    attributes to bare python generators.
    """

    def __init__(self, generator):
        self._generator = generator

    def __next__(self):
        if not hasattr(self, '_result'):
            self._result = next(self._generator)
        else:
            self._result = self._generator.send(self._result)

    def close(self):
        self._generator.close()

    def __iter__(self):
        return self

class IOGenerator(KaitenGenerator):
    """
    A generator wrapper that provides the accessors to support
    kaiten.scheduler.IOPollGenerator

    @param connection: connection object to block on for this generator
    @param is_read: boolean, does this do reading IO
    @param is_write: boolean, does this do writing IO
    """
    def __init__(self, generator, connection, is_read, is_write):
        super(IOGenerator, self).__init__(generator)
        self.connection = connection
        self._is_read = is_read
        self._is_write = is_write
        self.key = connection.fileno()
        if self.key == -1:
            raise Exception("creating io generator with invalid fileno")

    def fileno(self):
        return self.connection.fileno()

    def is_reader(self):
        return self._is_read

    def is_writer(self):
        return self._is_write

    def expected_run_time(self):
        return datetime.timedelta(seconds=kaiten.constants.normal_generator_time)

